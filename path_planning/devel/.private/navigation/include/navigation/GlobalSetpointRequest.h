// Generated by gencpp from file navigation/GlobalSetpointRequest.msg
// DO NOT EDIT!


#ifndef NAVIGATION_MESSAGE_GLOBALSETPOINTREQUEST_H
#define NAVIGATION_MESSAGE_GLOBALSETPOINTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation
{
template <class ContainerAllocator>
struct GlobalSetpointRequest_
{
  typedef GlobalSetpointRequest_<ContainerAllocator> Type;

  GlobalSetpointRequest_()
    : lat_x1(0.0)
    , lng_y1(0.0)
    , lat_x2(0.0)
    , lng_y2(0.0)  {
    }
  GlobalSetpointRequest_(const ContainerAllocator& _alloc)
    : lat_x1(0.0)
    , lng_y1(0.0)
    , lat_x2(0.0)
    , lng_y2(0.0)  {
  (void)_alloc;
    }



   typedef double _lat_x1_type;
  _lat_x1_type lat_x1;

   typedef double _lng_y1_type;
  _lng_y1_type lng_y1;

   typedef double _lat_x2_type;
  _lat_x2_type lat_x2;

   typedef double _lng_y2_type;
  _lng_y2_type lng_y2;





  typedef boost::shared_ptr< ::navigation::GlobalSetpointRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation::GlobalSetpointRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GlobalSetpointRequest_

typedef ::navigation::GlobalSetpointRequest_<std::allocator<void> > GlobalSetpointRequest;

typedef boost::shared_ptr< ::navigation::GlobalSetpointRequest > GlobalSetpointRequestPtr;
typedef boost::shared_ptr< ::navigation::GlobalSetpointRequest const> GlobalSetpointRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation::GlobalSetpointRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation::GlobalSetpointRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace navigation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::navigation::GlobalSetpointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::GlobalSetpointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::GlobalSetpointRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::GlobalSetpointRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::GlobalSetpointRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::GlobalSetpointRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation::GlobalSetpointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ddf610a10f41192f64c5125d996675da";
  }

  static const char* value(const ::navigation::GlobalSetpointRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xddf610a10f41192fULL;
  static const uint64_t static_value2 = 0x64c5125d996675daULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation::GlobalSetpointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation/GlobalSetpointRequest";
  }

  static const char* value(const ::navigation::GlobalSetpointRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation::GlobalSetpointRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 lat_x1\n\
float64 lng_y1\n\
float64 lat_x2\n\
float64 lng_y2\n\
";
  }

  static const char* value(const ::navigation::GlobalSetpointRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation::GlobalSetpointRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lat_x1);
      stream.next(m.lng_y1);
      stream.next(m.lat_x2);
      stream.next(m.lng_y2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GlobalSetpointRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation::GlobalSetpointRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation::GlobalSetpointRequest_<ContainerAllocator>& v)
  {
    s << indent << "lat_x1: ";
    Printer<double>::stream(s, indent + "  ", v.lat_x1);
    s << indent << "lng_y1: ";
    Printer<double>::stream(s, indent + "  ", v.lng_y1);
    s << indent << "lat_x2: ";
    Printer<double>::stream(s, indent + "  ", v.lat_x2);
    s << indent << "lng_y2: ";
    Printer<double>::stream(s, indent + "  ", v.lng_y2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_MESSAGE_GLOBALSETPOINTREQUEST_H

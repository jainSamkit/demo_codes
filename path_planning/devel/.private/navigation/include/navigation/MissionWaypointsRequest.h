// Generated by gencpp from file navigation/MissionWaypointsRequest.msg
// DO NOT EDIT!


#ifndef NAVIGATION_MESSAGE_MISSIONWAYPOINTSREQUEST_H
#define NAVIGATION_MESSAGE_MISSIONWAYPOINTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace navigation
{
template <class ContainerAllocator>
struct MissionWaypointsRequest_
{
  typedef MissionWaypointsRequest_<ContainerAllocator> Type;

  MissionWaypointsRequest_()
    : lng()
    , lat()
    , height_agl()  {
    }
  MissionWaypointsRequest_(const ContainerAllocator& _alloc)
    : lng(_alloc)
    , lat(_alloc)
    , height_agl(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lng_type;
  _lng_type lng;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _lat_type;
  _lat_type lat;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _height_agl_type;
  _height_agl_type height_agl;





  typedef boost::shared_ptr< ::navigation::MissionWaypointsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navigation::MissionWaypointsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MissionWaypointsRequest_

typedef ::navigation::MissionWaypointsRequest_<std::allocator<void> > MissionWaypointsRequest;

typedef boost::shared_ptr< ::navigation::MissionWaypointsRequest > MissionWaypointsRequestPtr;
typedef boost::shared_ptr< ::navigation::MissionWaypointsRequest const> MissionWaypointsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::navigation::MissionWaypointsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::navigation::MissionWaypointsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace navigation

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::navigation::MissionWaypointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::navigation::MissionWaypointsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::MissionWaypointsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::navigation::MissionWaypointsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::MissionWaypointsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::navigation::MissionWaypointsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::navigation::MissionWaypointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "04691daa6acdeb313a106d2a5de0c411";
  }

  static const char* value(const ::navigation::MissionWaypointsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x04691daa6acdeb31ULL;
  static const uint64_t static_value2 = 0x3a106d2a5de0c411ULL;
};

template<class ContainerAllocator>
struct DataType< ::navigation::MissionWaypointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "navigation/MissionWaypointsRequest";
  }

  static const char* value(const ::navigation::MissionWaypointsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::navigation::MissionWaypointsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] lng\n\
float32[] lat\n\
float32[] height_agl\n\
";
  }

  static const char* value(const ::navigation::MissionWaypointsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::navigation::MissionWaypointsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.lng);
      stream.next(m.lat);
      stream.next(m.height_agl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MissionWaypointsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::navigation::MissionWaypointsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::navigation::MissionWaypointsRequest_<ContainerAllocator>& v)
  {
    s << indent << "lng[]" << std::endl;
    for (size_t i = 0; i < v.lng.size(); ++i)
    {
      s << indent << "  lng[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lng[i]);
    }
    s << indent << "lat[]" << std::endl;
    for (size_t i = 0; i < v.lat.size(); ++i)
    {
      s << indent << "  lat[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.lat[i]);
    }
    s << indent << "height_agl[]" << std::endl;
    for (size_t i = 0; i < v.height_agl.size(); ++i)
    {
      s << indent << "  height_agl[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.height_agl[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAVIGATION_MESSAGE_MISSIONWAYPOINTSREQUEST_H

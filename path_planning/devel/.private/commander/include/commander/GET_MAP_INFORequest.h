// Generated by gencpp from file commander/GET_MAP_INFORequest.msg
// DO NOT EDIT!


#ifndef COMMANDER_MESSAGE_GET_MAP_INFOREQUEST_H
#define COMMANDER_MESSAGE_GET_MAP_INFOREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace commander
{
template <class ContainerAllocator>
struct GET_MAP_INFORequest_
{
  typedef GET_MAP_INFORequest_<ContainerAllocator> Type;

  GET_MAP_INFORequest_()
    : map_id()
    , map_lat()
    , map_lng()
    , height_agl(0.0)  {
    }
  GET_MAP_INFORequest_(const ContainerAllocator& _alloc)
    : map_id(_alloc)
    , map_lat(_alloc)
    , map_lng(_alloc)
    , height_agl(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_id_type;
  _map_id_type map_id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _map_lat_type;
  _map_lat_type map_lat;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _map_lng_type;
  _map_lng_type map_lng;

   typedef float _height_agl_type;
  _height_agl_type height_agl;





  typedef boost::shared_ptr< ::commander::GET_MAP_INFORequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::commander::GET_MAP_INFORequest_<ContainerAllocator> const> ConstPtr;

}; // struct GET_MAP_INFORequest_

typedef ::commander::GET_MAP_INFORequest_<std::allocator<void> > GET_MAP_INFORequest;

typedef boost::shared_ptr< ::commander::GET_MAP_INFORequest > GET_MAP_INFORequestPtr;
typedef boost::shared_ptr< ::commander::GET_MAP_INFORequest const> GET_MAP_INFORequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::commander::GET_MAP_INFORequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::commander::GET_MAP_INFORequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace commander

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::commander::GET_MAP_INFORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::commander::GET_MAP_INFORequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commander::GET_MAP_INFORequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::commander::GET_MAP_INFORequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commander::GET_MAP_INFORequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::commander::GET_MAP_INFORequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::commander::GET_MAP_INFORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "00fba32b0a4267ac9c0edc600d5ab8e4";
  }

  static const char* value(const ::commander::GET_MAP_INFORequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x00fba32b0a4267acULL;
  static const uint64_t static_value2 = 0x9c0edc600d5ab8e4ULL;
};

template<class ContainerAllocator>
struct DataType< ::commander::GET_MAP_INFORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "commander/GET_MAP_INFORequest";
  }

  static const char* value(const ::commander::GET_MAP_INFORequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::commander::GET_MAP_INFORequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string map_id\n\
float32[] map_lat\n\
float32[] map_lng\n\
float32 height_agl\n\
";
  }

  static const char* value(const ::commander::GET_MAP_INFORequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::commander::GET_MAP_INFORequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_id);
      stream.next(m.map_lat);
      stream.next(m.map_lng);
      stream.next(m.height_agl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GET_MAP_INFORequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::commander::GET_MAP_INFORequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::commander::GET_MAP_INFORequest_<ContainerAllocator>& v)
  {
    s << indent << "map_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_id);
    s << indent << "map_lat[]" << std::endl;
    for (size_t i = 0; i < v.map_lat.size(); ++i)
    {
      s << indent << "  map_lat[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.map_lat[i]);
    }
    s << indent << "map_lng[]" << std::endl;
    for (size_t i = 0; i < v.map_lng.size(); ++i)
    {
      s << indent << "  map_lng[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.map_lng[i]);
    }
    s << indent << "height_agl: ";
    Printer<float>::stream(s, indent + "  ", v.height_agl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMANDER_MESSAGE_GET_MAP_INFOREQUEST_H

// Generated by gencpp from file path_planner/FindPathRequest.msg
// DO NOT EDIT!


#ifndef PATH_PLANNER_MESSAGE_FINDPATHREQUEST_H
#define PATH_PLANNER_MESSAGE_FINDPATHREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_planner
{
template <class ContainerAllocator>
struct FindPathRequest_
{
  typedef FindPathRequest_<ContainerAllocator> Type;

  FindPathRequest_()
    : map_id()
    , start_position()
    , target_position()
    , height_agl(0.0)  {
    }
  FindPathRequest_(const ContainerAllocator& _alloc)
    : map_id(_alloc)
    , start_position(_alloc)
    , target_position(_alloc)
    , height_agl(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _map_id_type;
  _map_id_type map_id;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _start_position_type;
  _start_position_type start_position;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _target_position_type;
  _target_position_type target_position;

   typedef float _height_agl_type;
  _height_agl_type height_agl;





  typedef boost::shared_ptr< ::path_planner::FindPathRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planner::FindPathRequest_<ContainerAllocator> const> ConstPtr;

}; // struct FindPathRequest_

typedef ::path_planner::FindPathRequest_<std::allocator<void> > FindPathRequest;

typedef boost::shared_ptr< ::path_planner::FindPathRequest > FindPathRequestPtr;
typedef boost::shared_ptr< ::path_planner::FindPathRequest const> FindPathRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planner::FindPathRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planner::FindPathRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace path_planner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::path_planner::FindPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planner::FindPathRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planner::FindPathRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planner::FindPathRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planner::FindPathRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planner::FindPathRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planner::FindPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fec1e25ef4262fb3682c2ac02a99326b";
  }

  static const char* value(const ::path_planner::FindPathRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfec1e25ef4262fb3ULL;
  static const uint64_t static_value2 = 0x682c2ac02a99326bULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planner::FindPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planner/FindPathRequest";
  }

  static const char* value(const ::path_planner::FindPathRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planner::FindPathRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string map_id\n\
float32[] start_position\n\
float32[] target_position\n\
float32 height_agl\n\
";
  }

  static const char* value(const ::path_planner::FindPathRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planner::FindPathRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_id);
      stream.next(m.start_position);
      stream.next(m.target_position);
      stream.next(m.height_agl);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FindPathRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planner::FindPathRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planner::FindPathRequest_<ContainerAllocator>& v)
  {
    s << indent << "map_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.map_id);
    s << indent << "start_position[]" << std::endl;
    for (size_t i = 0; i < v.start_position.size(); ++i)
    {
      s << indent << "  start_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.start_position[i]);
    }
    s << indent << "target_position[]" << std::endl;
    for (size_t i = 0; i < v.target_position.size(); ++i)
    {
      s << indent << "  target_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.target_position[i]);
    }
    s << indent << "height_agl: ";
    Printer<float>::stream(s, indent + "  ", v.height_agl);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNER_MESSAGE_FINDPATHREQUEST_H
